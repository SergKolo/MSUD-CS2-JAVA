     1	/*
     2	Author:  Serg Kolo
     3	Date: Aug 25, 2015
     4	Class: CS2050, Fall 2015
     5	Instructor: Prof. Gurka
     6	Purpose: Line, Letter, and Digit counter
     7	*/
     8	
     9	import java.util.Scanner;
    10	import java.io.*;
    11	
    12	public class  skolodya_hw1_linechardigit_counter
    13	{
    14	    public static void main (String[] args)
    15	    {
    16	
    17	        if (args.length < 1 )
    18	            {
    19	                System.out.println("Usage: skolodya_hw1_linechardigit_counter FILE1 [FILE2] [FILE3] . . . ");
    20	                System.exit(1);
    21	            }
    22	
    23	        for (int i=0; i<args.length; i++)
    24	            {
    25	                try
    26	                    {
    27	                        countLinesChars(args[i]);
    28	                    }
    29	                catch (IOException e)
    30	                    {
    31	                        System.err.println(args[i] + "File not found");
    32	                    }
    33	            }
    34	    }
    35	
    36	    public static void countLinesChars( String filename ) throws IOException
    37	    {
    38	        FileInputStream inputFile  = new FileInputStream (filename);
    39	        BufferedReader readFile = new BufferedReader (new InputStreamReader(inputFile) );
    40	        int lineCount=0,charCount=0,digitCount=0;
    41	        String currentLine;
    42	
    43	        while ( (currentLine = readFile.readLine() ) != null )
    44	            {
    45	
    46	                lineCount++;
    47	
    48	                for (int j = 0 ; j < currentLine.length(); j++)
    49	                    {
    50	
    51	                        if ( Character.isLetter(currentLine.charAt(j)  ) )
    52	                            {
    53	                                charCount++;
    54	                            }
    55	                        else if ( Character.isDigit(currentLine.charAt(j) ) )
    56	                            {
    57	                                digitCount++;
    58	                            }
    59	                    }
    60	
    61	
    62	            }
    63	
    64	        readFile.close();
    65	        System.out.println("File:" + filename );
    66	        System.out.println("LineCount: " + lineCount +" CharCount: " + charCount + " Digits: " + digitCount );
    67	    }
    68	
    69	
    70	
    71	}


     1	/*
     2	Author:  Serg Kolo
     3	Date: Aug 26, 2015
     4	Class: CS2050, Fall 2015
     5	Instructor: Prof. Gurka
     6	Purpose: a program to find prime numbers under specific limit
     7	*/
     8	
     9	
    10	import javax.swing.JOptionPane;
    11	import java.util.*;
    12	import java.lang.Math;
    13	
    14	public class skolodya_hw1_primes
    15	{
    16	    public static void main (String[] args)
    17	    {
    18	        int userInput = 0;
    19	        while ( userInput <=1 )
    20	            {
    21	                userInput = Integer.parseInt(JOptionPane.showInputDialog("Enter a positive integer limit for finding primes, greater than 2 "));
    22	            }
    23	
    24	        ArrayList<Integer> integerList = new  ArrayList<Integer>();
    25	        fillArrayList (integerList,userInput);
    26	        sievePrimes(integerList,userInput);
    27	        printPrimes (integerList,userInput);
    28	    }
    29	
    30	    public static void fillArrayList ( ArrayList<Integer> nums,int limit )
    31	    {
    32	        /*
    33	        Arrays go from 0 to n. So, if user asks for, say, 13 as limit,
    34	        we allocate array list that is 13+1 items in size.
    35	        */
    36	        for (int i=0; i<(limit+1); i++)
    37	            {
    38	                nums.add(1);
    39	            }
    40	    }
    41	
    42	// Sieve of Erathosenes.
    43	// Basic idea is to cross out the multiples of known primes bellow
    44	// the limit. The remaining numbers are prime.
    45	// On paper it would be making a table or list of numbers and
    46	// crossing out numbers for each prime. In this case, we set
    47	// specific items whose positional number is not prime
    48	
    49	    public static void sievePrimes (ArrayList <Integer> nums, int limit)
    50	    {
    51	
    52	
    53	// if an integer has prime factors, then at least one
    54	// of them does not exceed the square root of that integer
    55	        for(int i=2; i<Math.sqrt(limit); i++)
    56	            {
    57	                for (int j=2; j<limit; j++)
    58	                    {
    59	                        if ( i*j > limit)
    60	                            break;
    61	
    62	// Mark items in the ArrayList , whose positional number is a multiple
    63	// of a prime number
    64	                        nums.set(i*j,0);
    65	
    66	                    }
    67	            }
    68	    }
    69	    public static void printPrimes (ArrayList <Integer> nums, int limit )
    70	    {
    71	        // JOptionPane dialogs require string, so
    72	// we need to convert integers to strings
    73	
    74	        ArrayList <String> primes =  new ArrayList();
    75	        String output =" ";
    76	
    77	// list numbers that have not been marked as false into
    78	// the primes ArrayList.
    79	        for (int i=2; i<limit; i++)
    80	            {
    81	                if (nums.get(i) == 1)
    82	                    {
    83	                        primes.add(Integer.toString(i));
    84	                    }
    85	            }
    86	
    87	        for (int j=0; j<primes.size(); j++ )
    88	            {
    89	                output += primes.get(j) + " ";
    90	            }
    91	
    92	        JOptionPane.showMessageDialog(null," Primes found  " + output);
    93	
    94	    }
    95	}
